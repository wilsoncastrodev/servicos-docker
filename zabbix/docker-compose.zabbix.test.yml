services:
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=aCqlMxPWOjLnNyf2 # pwgen -N 1 -s 16
      - POSTGRES_DB=zabbix
    volumes:
      - ./postgres-app/data:/var/lib/postgresql/data
    networks:
      web:
        ipv4_address: 10.0.9.46
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        parallelism: 1
        delay: 10s

  zabbix-server:
    image: zabbix/zabbix-server-pgsql
    environment: 
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=aCqlMxPWOjLnNyf2 # pwgen -N 1 -s 16
      - POSTGRES_DB=zabbix
      - DB_SERVER_HOST=postgres
    ports:
      - "10051:10051"
    depends_on:
      - postgres
    volumes:
      - ./zabbix-server-app/alertscripts:/usr/lib/zabbix/alertscripts
      - ./zabbix-server-app/externalscripts:/usr/lib/zabbix/externalscripts
    networks:
      web:
        ipv4_address: 10.0.9.47
    deploy:
      replicas: 1
      restart_policy:
        condition: none
      update_config:
        parallelism: 1
        delay: 10s

  zabbix-web:
    image: zabbix/zabbix-web-nginx-pgsql   
    environment:
      - TZ=America/Sao_Paulo
      - DB_SERVER_HOST=postgres
      - POSTGRES_USER=zabbix
      - POSTGRES_PASSWORD=aCqlMxPWOjLnNyf2 # pwgen -N 1 -s 16
      - POSTGRES_DB=zabbix
      - ZBX_SERVER_HOST=zabbix-server
      - PHP_TZ=America/Sao_Paulo
    depends_on:
      - postgres
      - zabbix-server
    networks:
      web:
        ipv4_address: 10.0.9.48
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=web"
        - "traefik.http.routers.zabbix.rule=Host(`zabbix.test.wilsoncastro.dev`)"
        - "traefik.http.routers.zabbix.entrypoints=https"
        - "traefik.http.routers.zabbix.tls=true"
        - "traefik.http.routers.zabbix.tls.certresolver=letsencrypt"
        - "traefik.http.services.zabbix.loadbalancer.server.port=8080"
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        parallelism: 1
        delay: 10s
      
  zabbix-agent:
    image: zabbix/zabbix-agent2
    user: root
    privileged: true
    environment:
      - TZ=America/Sao_Paulo
      - ZBX_HOSTNAME=zabbix-server
      - ZBX_SERVER_HOST=10.0.1.92
      - ZBX_SERVER_PORT=10051
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /dev:/host/dev:ro
      - /etc:/host/etc:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      web:
        ipv4_address: 10.0.9.49
    depends_on:
      - zabbix-server
    deploy:
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        parallelism: 1
        delay: 10s
  
  grafana:
    image: grafana/grafana
    environment: 
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app
      - GF_SECURITY_ADMIN_PASSWORD=aCqlMxPWOjLnNyf2 # pwgen -N 1 -s 16
      - GF_PLUGINS_ALLOW_LOADING_USIGNED_PLUGINS=alexanderzobnin-zabbix-datasource
    depends_on:
      - postgres
      - zabbix-server
    networks:
      web:
        ipv4_address: 10.0.9.50
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=web"
        - "traefik.http.routers.grafana.rule=Host(`grafana.test.wilsoncastro.dev`)"
        - "traefik.http.routers.grafana.entrypoints=https"
        - "traefik.http.routers.grafana.tls=true"
        - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      replicas: 1
      restart_policy:
        condition: any
      update_config:
        parallelism: 1
        delay: 10s


networks:
  web:
    external: true

# Implanta uma stack do serviço "Zabbix" no ambiente de teste
# sudo docker stack deploy -c docker-compose.zabbix.test.yml zabbix

# Implanta uma stack do serviço "Zabbix" no ambiente de teste
# sudo docker stack deploy -c docker-compose.zabbix.production.yml zabbix

# Lista serviços Docker em execução
# sudo docker service ls

# Lista detalhes específicos do serviço "Zabbix"
# sudo docker service ps zabbix_zabbix

# Exibe os logs do serviço "Zabbix"
# sudo docker service logs zabbix_zabbix

# Remove o serviço "Zabbix" do ambiente de teste
# sudo docker stack rm zabbix